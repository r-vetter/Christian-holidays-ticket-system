<?phpnamespace TicketBundle\Controller;use TicketBundle\Entity\Ticket;use TicketBundle\Entity\Subscriber;use TicketBundle\TicketBundle;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\HttpFoundation\Cookie;class SubscriberController extends Controller{    private $orderStates =  array(        'created'       => 'Aangemaakt (Betaling nog niet verwerkt)',        'order_submit'  => 'Betaling nog niet verwerkt',        'order_failed'  => 'Mislukt',        'order_pending' => 'Betaling is in behandeling/ betaling onbekend',        'paid'          => 'Betaald'    );    public function editAction($id = false, Request $request)    {        $ticketId = $request->cookies->get('ticket_id');        $ticket = $this->getDoctrine()->getRepository('TicketBundle:Ticket')->find($ticketId);        $item = $this->getDoctrine()->getRepository('TicketBundle:Subscriber')->find($id);        if ($item == null) {            $item = new Subscriber();            $item->setTicket($ticket);            $item->setCreated();        }        $form = $this->createFormBuilder($item);        $form = $form            ->add('first_name', 'text', array('required' => true, 'label' => 'Voornaam'))            ->add('last_name', 'text', array('required' => true,'label' => 'Achternaam'))            ->add('email', 'text', array('required' => true,'label' => 'E-mail'))            ->add('number_of_price1', 'integer', array(                'required' => true,                'label' => $item->getTicket()->getPrice1Title() . ' (&euro;' . number_format($item->getTicket()->getPrice1(), 2, ',', ' ') . ')'            ));            if($item->getTicket()->getPrice2Title() != ''){                $form = $form                    ->add('number_of_price2', 'integer', array(                        'required' => false,                        'label' => $item->getTicket()->getPrice2Title() . ' (&euro;' . number_format($item->getTicket()->getPrice2(), 2, ',', ' ') . ')'                    ));            }        $form = $form            ->add('commentary', 'textarea', array('required' => false, 'label' => 'Opmerking'))            ->add('payment_state', 'choice', array(                    'choices' => $this->orderStates,                    'label' => 'Betaal status'                )            )            ->add('save', 'submit', array('label' => 'Opslaan'))            ->getForm();        $form->handleRequest($request);        if ($form->isValid()) {            $em = $this->getDoctrine()->getManager();            $item->setUpdated();            $em->persist($item);            $em->flush();            return $this->redirect($this->generateUrl('subscriber_edit', array('id' => $item->getId())));        }        return $this->render('@Ticket/Subscriber/edit.html.twig', array(            'form' => $form->createView(),            'ticket' => $ticket,            'item' => $item        ));    }    public function frontendSubmitAction($id = false, Request $request)    {        $item = false;        $ticket = $this->getDoctrine()->getRepository('TicketBundle:Ticket')->find($id);        $ticket = $ticket != null ? $ticket : $request->cookies->get('ticket_id');        $subscriberId = $request->cookies->get('subscriber_id');        if($subscriberId != false){            $item = $this->getDoctrine()->getRepository('TicketBundle:Subscriber')->find($subscriberId);        }        if ($item == null) {            $item = new Subscriber();            $item->setTicket($ticket);            $item->setCreated();        }        $form = $this->createFormBuilder($item);        $form = $form            ->add('first_name', 'text', array('required' => true, 'label' => 'Voornaam'))            ->add('last_name', 'text', array('required' => true,'label' => 'Achternaam'))            ->add('email', 'text', array('required' => true,'label' => 'E-mail'))            ->add('number_of_price1', 'integer', array(                'required' => true,                'label' => $item->getTicket()->getPrice1Title() . ' (&euro;' . number_format($item->getTicket()->getPrice1(), 2, ',', ' ') . ')'            ));        if($item->getTicket()->getPrice2Title() != ''){            $form = $form                ->add('number_of_price2', 'integer', array(                    'required' => false,                    'label' => $item->getTicket()->getPrice2Title() . ' (&euro;' . number_format($item->getTicket()->getPrice2(), 2, ',', ' ') . ')'                ));        }        $form = $form            ->add('commentary', 'textarea', array('required' => false,'label'=>'Opmerking'))            ->add('save', 'submit', array('label' => 'Volgende'))            ->getForm();        $form->handleRequest($request);        if ($form->isValid()) {            $em = $this->getDoctrine()->getManager();            if($item->getPaymentState() === null){                $item->setPaymentState('created');            }            $item->setUpdated();            $em->persist($item);            $em->flush();            $response = new Response();            $response->headers->setCookie(new Cookie("subscriber_id", $item->getId()));            $response->sendHeaders();            return $this->redirect($this->generateUrl('subscriber_frondend_overview'));        }        return $this->render('@Ticket/Subscriber/frontend.html.twig', array(            'form' => $form->createView(),            'ticket' => $ticket,            'item' => $item        ));    }    public function frontendResetAction($id = false){        $response = new Response();        $response->headers->setCookie(new Cookie("subscriber_id", false));        $response->sendHeaders();        return $this->redirect($this->generateUrl('subscriber_frondend_submit',array('id' => $id)));    }    public function frontendOverviewAction(Request $request)    {        /* @var Subscriber $item */        $sHtml = '';        $subscriberId = $request->cookies->get('subscriber_id');        $item = $this->getDoctrine()->getRepository('TicketBundle:Subscriber')->find($subscriberId);        $em = $this->getDoctrine()->getManager();        if($item->getPaymentState() == 'created') {            $item->setPaymentState('order_submit');        }        $item->setUpdated();        $em->persist($item);        $em->flush();        $orderId = $item->getId();        $price1 = $item->getNumberOfPrice1() * $item->getTicket()->getPrice1();        $price2 = $item->getNumberOfPrice2() * $item->getTicket()->getPrice2();        $totalPrice = $price1 + $price2;        $item->setTotalPrice($totalPrice);        $em->persist($item);        $em->flush();        $kernel = $this->get('kernel');        require('omnikassa/start.php');        return $this->render('@Ticket/Subscriber/overview.html.twig', array(            'item' => $item,            'html_omnikassa' => $sHtml,            'orderState' => $this->orderStates[$item->getPaymentState()],            'debug' => $kernel->isDebug()        ));    }    public function frontendConfirmationAction ($id){        $item = $this->getDoctrine()->getRepository('TicketBundle:Subscriber')->find($id);        $sHtml = '';        require('omnikassa/return.php');        $em = $this->getDoctrine()->getManager();        // Bepaal de transactie status, en bevestig deze aan de bezoeker        $downloadPdfLink = false;        if(strcmp($sTransactionStatus, 'SUCCESS') === 0)        {            $downloadPdfLink = true;            $item->setPaymentState('paid');            $sHtml = '<p>Uw betaling is met succes ontvangen. U ontvangt een bevestigingsmail.</p>';        }        elseif(strcmp($sTransactionStatus, 'PENDING') === 0)        {            $item->setPaymentState('order_pending');            $sHtml = '<p>Uw betaling is in behandeling.</p>';        }        elseif(strcmp($sTransactionStatus, 'CANCELLED') === 0)        {            $item->setPaymentState('order_failed');            $sHtml = '<p>Uw betaling is geannuleerd.<br><a href="' . htmlspecialchars($aSettings['website_url'] . $this->generateUrl('subscriber_frondend_overview',array('id' => $item->getId()))) . '">Probeer opnieuw te betalen.</a></p>';        }        elseif(strcmp($sTransactionStatus, 'EXPIRED') === 0)        {            $item->setPaymentState('order_failed');            $sHtml = '<p>Uw betaling is mislukt.<br><a href="' . htmlspecialchars($aSettings['website_url'] . $this->generateUrl('subscriber_frondend_overview',array('id' => $item->getId()))) . '">Probeer opnieuw te betalen.</a></p>';        }        else // if(strcmp($sTransactionStatus, 'FAILURE') === 0)        {            $item->setPaymentState('order_pending');            $sHtml = '<p>Uw betaling is mislukt.<br><a href="' . htmlspecialchars($aSettings['website_url'] . $this->generateUrl('subscriber_frondend_overview',array('id' => $item->getId()))) . '">Probeer opnieuw te betalen.</a></p>';        }        $item->setUpdated();        $em->persist($item);        $em->flush();        $this->getPdf($item,true);        return $this->render('@Ticket/Subscriber/confirmation.html.twig', array(            'downloadPdfLink' => $downloadPdfLink,            'omnikassa_html' => $sHtml,            'item' => $item        ));    }    public function downloadPdfAction($id){        $item = $this->getDoctrine()->getRepository('TicketBundle:Subscriber')->find($id);        $this->getPdf($item,false);    }    public function getPdf($item,$sendMail = false){        $downloadPdf = $sendMail ? true : false;        /* @var Subscriber $item */        $twigContent = $this->render('@Ticket/Subscriber/pdf.html.twig', array('subscriber' => $item));        $content = $twigContent->getContent();        require_once('html2pdf/html2pdfController.php');        require_once('pjmail/pjmail.class.php');        $html2pdf = new \html2pdf('P','A4','nl');        $html2pdf->WriteHTML($content);        $content_pdf = $html2pdf->Output('Ticket-20935.pdf',$downloadPdf);        if($sendMail) {            $mail = new \PJmail();            $mail->setAllFrom('info@uwwebmaster.nl', "Reindert Vetter");            $mail->addrecipient('reindert@outlook.com');            $mail->addsubject('Dit is een test');            $mail->text = 'In de bijlage kan je de ticket vinden';            $mail->addbinattachement('test.pdf', $content_pdf);            $mail->sendmail();        } else {            echo $content_pdf;            exit;        }    }    public function exportSubscribersAction(Request $request){        /* @var Subscriber $subscriber */        $ticketId = $request->cookies->get('ticket_id');        $ticket = $this->getDoctrine()->getRepository('TicketBundle:Ticket')->find($ticketId);        $twigContent = $this->render('@Ticket/Subscriber/export.html.twig', array('ticket' => $ticket))->getContent();        header('Content-type: application/excel');        header('Content-Disposition: attachment; filename=Export inschrijvingen '.$ticket->getTitle().'.xls');        echo $twigContent;        exit;    }}